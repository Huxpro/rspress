(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["docs_en_plugin_system_plugin-api_mdx"],{86461:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return d}});var s,i=r("66791"),t=r("190"),o=r("93376");function a(e){var n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",ul:"ul",li:"li",strong:"strong",code:"code",pre:"pre",blockquote:"blockquote",div:"div"},(0,t.useMDXComponents)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"plugin-api",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#plugin-api",children:"#"}),"Plugin API"]}),"\n",(0,i.jsx)(n.p,{children:"In the previous section, we introduced the basic structure of the plugin. In this section, we will introduce the API of the plugin to help you understand the abilities of the plugin in more detail."}),"\n",(0,i.jsxs)(n.h3,{id:"globalstyles",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#globalstyles",children:"#"}),"globalStyles"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It is used to add a global style, and the absolute path of a style file is passed in, and the usage is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\nimport path from 'path';\n\nexport function pluginForDoc(): RspressPlugin {\n  // style path\n  const stylePath = path.join(__dirname, 'some-style.css');\n  return {\n    // plugin name\n    name: 'plugin-name',\n    globalStyles: path.join(__dirname, 'global.css'),\n  };\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"For example, if you want to modify the theme color, you can do so by adding a global style:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",meta:'title="global.css"',children:":root {\n  --modern-c-brand: #ffa500;\n  --modern-c-brand-dark: #ffa500;\n  --modern-c-brand-darker: #c26c1d;\n  --modern-c-brand-light: #f2a65a;\n  --modern-c-brand-lighter: #f2a65a;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"globaluicomponents",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#globaluicomponents",children:"#"}),"globalUIComponents"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"string[]"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It is used to add global components, passing in an array, each item in the array is the absolute path of a component, the usage is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(): RspressPlugin {\n  // component path\n  const componentPath = path.join(__dirname, 'xxx.tsx');\n  return {\n    // plugin name\n    name: 'plugin-comp',\n    // Path to global components\n    globalUIComponents: [componentPath],\n  };\n}\n"})}),"\n","\n",(0,i.jsx)(o.default,{}),"\n",(0,i.jsxs)(n.h3,{id:"builderconfig",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#builderconfig",children:"#"}),"builderConfig"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"BuilderConfig"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The bottom layer of Rspress is based on the Rspack mode of ",(0,i.jsx)(n.a,{href:"https://modernjs.dev/builder/",target:"_blank",rel:"noopener noreferrer",children:"Modern.js Builder"})," for document build process. The Builder can be configured through ",(0,i.jsx)(n.code,{children:"builderConfig"}),". For specific configuration options, please refer to ",(0,i.jsx)(n.a,{href:"https://modernjs.dev/builder/api/index.html",target:"_blank",rel:"noopener noreferrer",children:"Modern.js Builder"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Of course, if you want to configure Rspack directly, you can also configure it through ",(0,i.jsx)(n.code,{children:"buildConfig.tools.rspack"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(slug: string): RspressPlugin {\n  return {\n    name: 'plugin-name',\n    // Global variable definitions for build phase\n    builderConfig: {\n      source: {\n        define: {\n          SLUG: JSON.stringify(slug),\n        },\n      },\n      tools: {\n        rspack(options) {\n          // Modify rspack config\n        },\n      },\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"config",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#config",children:"#"}),"config"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"(config: DocConfig) => DocConfig | Promise<DocConfig>"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It is used to modify/extend the configuration of Rspress itself. For example, if you want to modify the title of the document, you can do it through ",(0,i.jsx)(n.code,{children:"config"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(): RspressPlugin {\n  return {\n    name: 'plugin-name',\n    // Extend the config of the Rspress itself\n    config(config) {\n      return {\n        ...config,\n        title: '新的文档标题',\n      };\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"beforebuildafterbuild",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforebuildafterbuild",children:"#"}),"beforeBuild/afterBuild"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"(config: DocConfig, isProd: boolean) => void | Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It is used to perform some operations before/after the document is built. The first parameter is the config of the document, and the second parameter is whether it is currently a production environment. The usage is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(): RspressPlugin {\n  return {\n    name: 'plugin-name',\n    // Hook to execute before build\n    async beforeBuild(config, isProd) {\n      // Do something here\n    },\n    // Hook to execute after build\n    async afterBuild(config, isProd) {\n      // Do something here\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.div,{className:"modern-directive tip",children:[(0,i.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"modern-directive-content",children:(0,i.jsxs)(n.p,{children:["\nWhen the ",(0,i.jsx)(n.code,{children:"beforeBuild"})," hook is executed, the ",(0,i.jsx)(n.code,{children:"config"}),"plugins of all plugins have been processed, so the config parameter already represents the final document configuration."]})})]}),"\n",(0,i.jsxs)(n.h3,{id:"markdown",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#markdown",children:"#"}),"markdown"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"{ remarkPlugins?: Plugin[]; rehypePlugins?: Plugin[] }"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It is used to extend the compilation ability of Markdown/MDX. If you want to add custom remark/rehype plugins or MDX globalComponents, you can use ",(0,i.jsx)(n.code,{children:"markdown"})," options to achieve:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(): RspressPlugin {\n  return {\n    name: 'plugin-name',\n    markdown: {\n      remarkPlugins: [\n        // Add custom remark plugin\n      ],\n      rehypePlugins: [\n        // Add custom rehype plugin\n      ],\n      globalComponents: [\n        // Register global components for MDX\n      ],\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.div,{className:"modern-directive warning",children:[(0,i.jsx)(n.div,{className:"modern-directive-title",children:"WARNING"}),(0,i.jsx)(n.div,{className:"modern-directive-content",children:(0,i.jsxs)(n.p,{children:["\nWhen mdx-rs compilation is enabled (that is, ",(0,i.jsx)(n.code,{children:"markdown.experimentalMdxRs"})," is ",(0,i.jsx)(n.code,{children:"true"}),"in the config file), the added remark/rehype plugin will be ignored."]})})]}),"\n",(0,i.jsxs)(n.h3,{id:"extendpagedata",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extendpagedata",children:"#"}),"extendPageData"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Type: ",(0,i.jsx)(n.code,{children:"(pageData: PageData) => void | Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(): RspressPlugin {\n  return {\n    name: 'plugin-name',\n    // Extend the page data\n    extendPageData(pageData) {\n      // You can add or modify properties on the pageData object\n      pageData.a = 1;\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After extending the page data, you can access the page data through the ",(0,i.jsx)(n.code,{children:"usePageData"})," hook in the theme."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"",children:"import { usePageData } from 'rspress';\n\nexport function MyComponent() {\n  const { page } = usePageData();\n  // page.a === 1\n  return <div>{page.a}</div>;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"addpages",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addpages",children:"#"}),"addPages"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Type: ",(0,i.jsx)(n.code,{children:"(config: UserConfig) => AddtionalPage[] | Promise<AddtionalPage[]>"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"config"})," parameter is the ",(0,i.jsx)(n.code,{children:"doc"})," config of ",(0,i.jsx)(n.code,{children:"rspress.config.ts"}),", and the ",(0,i.jsx)(n.code,{children:"AddtionalPage"})," type is defined as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"",children:"interface AddtionalPage {\n  routePath: string;\n  filepath?: string;\n  content?: string;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Used to add additional pages, you can return an array in the ",(0,i.jsx)(n.code,{children:"addPages"})," function, each item in the array is a page config, you can specify the route of the page through ",(0,i.jsx)(n.code,{children:"routePath"}),", through ",(0,i.jsx)(n.code,{children:"filepath"})," or ",(0,i.jsx)(n.code,{children:"content"})," to specify the content of the page. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:"",children:"import path from 'path';\nimport { RspressPlugin } from '@rspress/shared';\n\nexport function docPluginDemo(): RspressPlugin {\n  return {\n    name: 'add-pages',\n    addPages(config, isProd) {\n      return [\n        //  Support the absolute path of the real file (filepath), which will read the content of md(x) in the disk\n        {\n          routePath: '/filepath-route',\n          filepath: path.join(__dirname, 'blog', 'index.md'),\n        },\n        //  Support to directly pass in the content of md(x) through the content parameter\n        {\n          routePath: '/content-route',\n          content: '# Demo2',\n        },\n      ];\n    },\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"addPages"})," accepts two parameters, ",(0,i.jsx)(n.code,{children:"config"})," is the config of the current document site, ",(0,i.jsx)(n.code,{children:"isProd"})," indicates whether it is a production environment."]}),"\n",(0,i.jsxs)(n.h3,{id:"routegenerated",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#routegenerated",children:"#"}),"routeGenerated"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),"：",(0,i.jsx)(n.code,{children:"(routeMeta: RouteMeta[]) => void | Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In this hook, you can get all the route meta information. The structure of each route meta information is as follows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:"",children:"export interface RouteMeta {\n  // route path\n  routePath: string;\n  // file absolute path\n  absolutePath: string;\n  // The page name, as part of the chunk filename\n  pageName: string;\n  // language of current route\n  lang: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"例子:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { RspressPlugin } from '@rspress/shared';\n\nexport function pluginForDoc(): RspressPlugin {\n  return {\n    // plugin name\n    name: 'plugin-routes',\n    // Hook to execute after route generated\n    async routeGenerated(routes) {\n      // Do something here\n    },\n  };\n}\n"})})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["en%2Fplugin%2Fsystem%2Fplugin-api.mdx"]={toc:[{id:"globalstyles",text:"globalStyles",depth:3},{id:"globaluicomponents",text:"globalUIComponents",depth:3},{id:"builderconfig",text:"builderConfig",depth:3},{id:"config",text:"config",depth:3},{id:"beforebuildafterbuild",text:"beforeBuild/afterBuild",depth:3},{id:"markdown",text:"markdown",depth:3},{id:"extendpagedata",text:"extendPageData",depth:3},{id:"addpages",text:"addPages",depth:3},{id:"routegenerated",text:"routeGenerated",depth:3}],title:"Plugin API",frontmatter:{}};var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.useMDXComponents)(),e.components).wrapper;return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(a,e)})):a(e)}}}]);